#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_crypto_kx_keypair_impl(
    port_: MessagePort,
    pk_size: impl Wire2Api<usize> + UnwindSafe,
    sk_size: impl Wire2Api<usize> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, KeyPair>(
        WrapInfo {
            debug_name: "crypto_kx_keypair",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_pk_size = pk_size.wire2api();
            let api_sk_size = sk_size.wire2api();
            move |task_callback| Ok(crypto_kx_keypair(api_pk_size, api_sk_size))
        },
    )
}
fn wire_crypto_box_before_nm_impl(
    port_: MessagePort,
    keypair: impl Wire2Api<KeyPair> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "crypto_box_before_nm",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_keypair = keypair.wire2api();
            move |task_callback| Ok(crypto_box_before_nm(api_keypair))
        },
    )
}
fn wire_crypto_box_beforenm_hex_impl(
    port_: MessagePort,
    keypair: impl Wire2Api<KeyPair> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String>(
        WrapInfo {
            debug_name: "crypto_box_beforenm_hex",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_keypair = keypair.wire2api();
            move |task_callback| Ok(crypto_box_beforenm_hex(api_keypair))
        },
    )
}
fn wire_crypto_kx_client_session_keys_impl(
    port_: MessagePort,
    client_keypair: impl Wire2Api<KeyPair> + UnwindSafe,
    server_pk: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, SessionKey>(
        WrapInfo {
            debug_name: "crypto_kx_client_session_keys",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_client_keypair = client_keypair.wire2api();
            let api_server_pk = server_pk.wire2api();
            move |task_callback| {
                Ok(crypto_kx_client_session_keys(
                    api_client_keypair,
                    api_server_pk,
                ))
            }
        },
    )
}
fn wire_crypto_kx_server_session_keys_impl(
    port_: MessagePort,
    server_keypair: impl Wire2Api<KeyPair> + UnwindSafe,
    client_pk: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, SessionKey>(
        WrapInfo {
            debug_name: "crypto_kx_server_session_keys",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_server_keypair = server_keypair.wire2api();
            let api_client_pk = client_pk.wire2api();
            move |task_callback| {
                Ok(crypto_kx_server_session_keys(
                    api_server_keypair,
                    api_client_pk,
                ))
            }
        },
    )
}
fn wire_crypto_stream_chacha20_xor_impl(
    port_: MessagePort,
    message: impl Wire2Api<Vec<u8>> + UnwindSafe,
    nonce: impl Wire2Api<Vec<u8>> + UnwindSafe,
    key: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "crypto_stream_chacha20_xor",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_message = message.wire2api();
            let api_nonce = nonce.wire2api();
            let api_key = key.wire2api();
            move |task_callback| Ok(crypto_stream_chacha20_xor(api_message, api_nonce, api_key))
        },
    )
}
fn wire_crypto_aead_chacha20poly1305_encrypt_impl(
    port_: MessagePort,
    message: impl Wire2Api<Vec<u8>> + UnwindSafe,
    nonce: impl Wire2Api<Vec<u8>> + UnwindSafe,
    key: impl Wire2Api<Vec<u8>> + UnwindSafe,
    additional_data: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "crypto_aead_chacha20poly1305_encrypt",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_message = message.wire2api();
            let api_nonce = nonce.wire2api();
            let api_key = key.wire2api();
            let api_additional_data = additional_data.wire2api();
            move |task_callback| {
                Ok(crypto_aead_chacha20poly1305_encrypt(
                    api_message,
                    api_nonce,
                    api_key,
                    api_additional_data,
                ))
            }
        },
    )
}
fn wire_crypto_aead_chacha20poly1305_decrypt_impl(
    port_: MessagePort,
    ciphertext: impl Wire2Api<Vec<u8>> + UnwindSafe,
    nonce: impl Wire2Api<Vec<u8>> + UnwindSafe,
    key: impl Wire2Api<Vec<u8>> + UnwindSafe,
    additional_data: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "crypto_aead_chacha20poly1305_decrypt",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_ciphertext = ciphertext.wire2api();
            let api_nonce = nonce.wire2api();
            let api_key = key.wire2api();
            let api_additional_data = additional_data.wire2api();
            move |task_callback| {
                Ok(crypto_aead_chacha20poly1305_decrypt(
                    api_ciphertext,
                    api_nonce,
                    api_key,
                    api_additional_data,
                ))
            }
        },
    )
}
fn wire_bin_to_hex_impl(port_: MessagePort, data: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String>(
        WrapInfo {
            debug_name: "bin_to_hex",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_data = data.wire2api();
            move |task_callback| Ok(bin_to_hex(api_data))
        },
    )
}
fn wire_crypto_secretbox_xchacha20poly1305_easy_impl(
    port_: MessagePort,
    message: impl Wire2Api<Vec<u8>> + UnwindSafe,
    nonce: impl Wire2Api<Vec<u8>> + UnwindSafe,
    key: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "crypto_secretbox_xchacha20poly1305_easy",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_message = message.wire2api();
            let api_nonce = nonce.wire2api();
            let api_key = key.wire2api();
            move |task_callback| {
                Ok(crypto_secretbox_xchacha20poly1305_easy(
                    api_message,
                    api_nonce,
                    api_key,
                ))
            }
        },
    )
}
fn wire_hex_to_bin_impl(port_: MessagePort, hex: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "hex_to_bin",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_hex = hex.wire2api();
            move |task_callback| Ok(hex_to_bin(api_hex))
        },
    )
}
fn wire_random_bytes_buf_impl(port_: MessagePort, size: impl Wire2Api<usize> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "random_bytes_buf",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_size = size.wire2api();
            move |task_callback| Ok(random_bytes_buf(api_size))
        },
    )
}
fn wire_random_nonce_bytes_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "random_nonce_bytes",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(random_nonce_bytes()),
    )
}
fn wire_random_nonce_hex_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String>(
        WrapInfo {
            debug_name: "random_nonce_hex",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(random_nonce_hex()),
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}
// Section: impl IntoDart

impl support::IntoDart for KeyPair {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.pk.into_into_dart().into_dart(),
            self.sk.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for KeyPair {}
impl rust2dart::IntoIntoDart<KeyPair> for KeyPair {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for SessionKey {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.rx.into_into_dart().into_dart(),
            self.tx.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for SessionKey {}
impl rust2dart::IntoIntoDart<SessionKey> for SessionKey {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
